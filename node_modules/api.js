var mysql = require('mysql');
var request = require('request');
var querystring = require('querystring');

var openEHR = {
  servers: {
    marand: {
      url: 'https://ehrscape.code-4-health.org',
      queryType: 'aql',
      sourceName: 'Marand'
    },
    ethercis: {
      url: 'http://188.166.246.78:8080',
      queryType: 'sql',
      sourceName: 'EtherCIS'
    }
  },
  nhsNoMap: {}
};

function connectToMySQL(finished) {
  var con = mysql.createConnection({
    host: "localhost",
    user: "root",
    password: "password",
    database: 'poc_legacy'
  });

  con.connect(function(err){
    if (err) {
      finished({error: 'Unable to connect to MySQL: ' + err});
      return;
    }
    console.log('Connected to MySQL');
  });
  return con;
}

function disconnectFromMySQL(connection) {
  console.log('Disconnected from MySQL');
  connection.end();
}

function getDepartments(connection, finished, callback) {
  var deptsCache = new this.documentStore.DocumentNode('rippleMedicalDepts', [process.pid]);

  var q = this;
  connection.query('SELECT * FROM medical_departments',function(err,depts){
    if(err) {
      disconnectFromMySQL(connection);
      finished({error: 'MySQL query error: ' + err});
      return;
    }
    var departments = {};
    depts.forEach(function(dept) {
      //departments[dept.id] = dept.department;
      deptsCache.$(dept.id).setDocument(dept);
    });
    callback.call(q);
  });
}

function getGPs(connection, finished, callback) {
  var gpCache = new this.documentStore.DocumentNode('rippleGPs', [process.pid]);

  var q = this;
  connection.query('SELECT * FROM general_practitioners', function(err, gps){
    if(err) {
      disconnectFromMySQL(connection);
      finished({error: 'MySQL query error: ' + err});
      return;
    }
    gps.forEach(function(gp) {
      gpCache.$(gp.id).setDocument(gp);
    });
    callback.call(q);
  });
}

function getAllPatients(connection, finished) {

  var patientGlo = new this.documentStore.DocumentNode('ripplePatients', [process.pid]);
  var gpCache = new this.documentStore.DocumentNode('rippleGPs', [process.pid]);
  var deptCache = new this.documentStore.DocumentNode('rippleMedicalDepts', [process.pid]);

  connection.query('SELECT * FROM patients',function(err,rows){
    if(err) {
      disconnectFromMySQL(connection);
      finished({error: 'MySQL query error: ' + err});
      return;
    }
    disconnectFromMySQL(connection);
    var patients = [];
    rows.forEach(function(row) {
      var patient = {};
      patient.id = row.nhs_number;
      patient.nhsNumber = row.nhs_number;
      patient.name = row.first_name + ' ' + row.last_name;
      var address = '';
      var comma = ' ';
      if (row.address_1) {
        address = row.address_1;
        comma = ', ';
      }
      if (row.address_2) {
        address = address + comma + row.address_2;
        comma = ', ';
      }
      if (row.address_3) {
        address = address + comma + row.address_3;
        comma = ', ';
      }
      if (row.address_4) {
        address = address + comma + row.address_4;
        comma = ', ';
      }
      if (row.address_5) {
        address = address + comma + row.address_5;
        comma = ', ';
      }
      if (row.postcode) {
        address = address + comma + row.postcode;
        comma = ', ';
      }
      patient.address = address;
      patient.dateOfBirth = new Date(row.date_of_birth).getTime();
      patient.gender = row.gender;
      patient.phone = row.phone;
      patient.gpDetails = gpCache.$(row.gp_id).$('gp_name').value;
      patient.pasNo = row.pas_number;
      patient.department = deptCache.$(row.department_id).$('department').value;
      patients.push(patient);
      patientGlo.$(row.nhs_number).setDocument(patient);
    });
    finished(patients);
  });
}

function getPatients(finished) {
  
  var patientCache = new this.documentStore.DocumentNode('ripplePatients', [process.pid]);
  if (patientCache.exists) {
    var patients = [];
    patientCache.forEachChild(function(no, patient) {
      patients.push(patient.getDocument());
    });
    finished(patients);
  }
  else {
    var q = this;
    var ready = {
      medicalDepts: false,
      gps: false
    };
    var connection = connectToMySQL(finished);

    var callback = function() {
      getAllPatients.call(q, connection, finished);
    };

    getDepartments.call(this, connection, finished, function() {
      q.emit('mySQLResultsReady', 'medicalDepts', ready, callback);
    });

    getGPs.call(this, connection, finished, function() {
      q.emit('mySQLResultsReady', 'gps', ready, callback);
    });

  }
}

function getOpenEHRSessions(username, password, callback) {
  var params = {
    callback: callback,
    url: '/rest/v1/session',
    //queryString: 'username=' + username + '&password=' + password,
    queryString: {
      username: username,
      password: password
    },
    method: 'POST',
    useSessionId: false
  };
  params.processBody = function(body, host) {
    if (!openEHR.sessions) openEHR.sessions = {};
    openEHR.sessions[host] = body.sessionId;
  };
  openEHRRequest(params);
}

function getOpenEHRId(nhsNo, callback) {
  var params = {
    callback: callback,
    url: '/rest/v1/ehr',
    //queryString: 'subjectId=' + nhsNo + '&subjectNamespace=uk.nhs.nhs_number',
    queryString: {
      subjectId: nhsNo,
      subjectNamespace: 'uk.nhs.nhs_number'
    },
    method: 'GET'
  };
  params.processBody = function(body, host) {
    if (!openEHR.nhsNoMap[nhsNo]) openEHR.nhsNoMap[nhsNo] = {};
    openEHR.nhsNoMap[nhsNo][host] = body.ehrId;
  };
  openEHRRequest(params);
}

function getPatientSummary(nhsNo, callback) {

  var summaryGlo = new this.documentStore.DocumentNode('ripplePatientSummary', [process.pid]);
  summaryGlo.delete();
  var q = this;

  var ready = {
    allergies: false,
    medications: false,
    problems: false,
    contacts: false
  };

  getAllergies.call(this, nhsNo, function() {
    q.emit('domainReady', 'allergies', ready, callback);
  });

  getProblems.call(this, nhsNo, function() {
    q.emit('domainReady', 'problems', ready, callback);
  });

  getMedications.call(this, nhsNo, function() {
    q.emit('domainReady', 'medications', ready, callback);
  });

  getContacts.call(this, nhsNo, function() {
    q.emit('domainReady', 'contacts', ready, callback);
  });

}

function getDomain(nhsNo, domain, callback) {

  /*
    domain should define

   domain = {
     name: 'allergies',
     query: {
       aql: [part 1, 'nhsNo', part 2],
       sql: [part 1, 'openEHRNo', part 2]
     }
     fieldName: 'cause'
     
   }

  */

  var params = {
    callback: callback,
    url: '/rest/v1/query',
    method: 'GET'
  };
  var q = this;

  var queryType;
  var query;
  var server;
  var patientId;
  params.dontAsk = domain.dontAsk;
  params.hostSpecific = {};
  for (var host in openEHR.servers) {
    if (domain.dontAsk && domain.dontAsk[host]) {
      continue;
    }
    params.hostSpecific[host] = {
      qs: {}
    };
    server = openEHR.servers[host];
    queryType = server.queryType;
    query = domain.query[queryType];
    patientId = nhsNo;
    if (query[1] === 'openEHRNo') patientId = openEHR.nhsNoMap[nhsNo][host];

    params.hostSpecific[host]['qs'][queryType] = query[0] + patientId + query[2];

  }

  params.processBody = function(body, host) { 
    var results = [];
    if (body && body.resultSet) {
      body.resultSet.forEach(function(result) {
        var textValue = result[domain.fieldName];
        if (textValue !== '' && textValue !== null) {
          var record = {
            sourceId: result.uid.split(':')[0],
            text: textValue,
            source: openEHR.servers[host].sourceName
          };
          results.push(record);
        }
      });
    }
    var doc = new q.documentStore.DocumentNode('ripplePatientSummary', [process.pid, domain.name]);
    doc.setDocument(results);
  };

  openEHRRequest(params);

}

function getAllergies(nhsNo, callback) {
  var domain = {
    name: 'allergies',
    query: {
      sql: [
        "SELECT ehr.entry.composition_id as uid, ehr.entry.entry #>> '{/composition[openEHR-EHR-COMPOSITION.adverse_reaction_list.v1 and name/value=''Adverse reaction list''], /content[openEHR-EHR-SECTION.allergies_adverse_reactions_rcp.v1],0, /items[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1],0,/data[at0001],/items[at0002 and name/value=''Causative agent''],/value,value}' as cause, ehr.event_context.start_time FROM ehr.entry INNER JOIN ehr.composition ON ehr.composition.id = ehr.entry.composition_id INNER JOIN ehr.event_context ON ehr.event_context.composition_id = ehr.entry.composition_id WHERE (ehr.composition.ehr_id = '",
        'openEHRNo',
        "') AND (ehr.entry.archetype_Id = 'openEHR-EHR-COMPOSITION.adverse_reaction_list.v1') ORDER BY ehr.event_context.start_time DESC;"
      ],
      aql: [
        "select  a/uid/value as uid, b_a/data[at0001]/items[at0002]/value/value as cause, b_a/data[at0001]/items[at0002]/value/defining_code/code_string as cause_code,  b_a/data[at0001]/items[at0002]/value/defining_code/terminology_id/value as cause_terminology,     b_a/data[at0001]/items[at0009]/items[at0011]/value/value as reaction from EHR e contains COMPOSITION a[openEHR-EHR-COMPOSITION.adverse_reaction_list.v1] contains EVALUATION b_a[openEHR-EHR-EVALUATION.adverse_reaction_risk.v1] where a/name/value='Allergies list' and e/ehr_status/subject/external_ref/namespace = 'uk.nhs.nhs_number' and e/ehr_status/subject/external_ref/id/value = '",
        'nhsNo',
        "'"
      ]
    },
    fieldName: 'cause'
  };
  getDomain.call(this, nhsNo, domain, callback);
}


function getProblems(nhsNo, callback) {
  var domain = {
    name: 'problems',
    query: {
      sql: [
        "SELECT ehr.entry.composition_id as uid, ehr.entry.entry #>> '{/composition[openEHR-EHR-COMPOSITION.problem_list.v1 and name/value=''Problem list''], /content[openEHR-EHR-SECTION.problems_issues_rcp.v1],0, /items[openEHR-EHR-EVALUATION.problem_diagnosis.v1],0,/data[at0001],/items[at0002 and name/value=''Problem/Diagnosis name''],/value,value}' as problem, ehr.event_context.start_time FROM ehr.entry INNER JOIN ehr.composition ON ehr.composition.id = ehr.entry.composition_id INNER JOIN ehr.event_context ON ehr.event_context.composition_id = ehr.entry.composition_id WHERE ehr.composition.ehr_id = '",
        'openEHRNo',
        "' AND ehr.entry.archetype_Id = 'openEHR-EHR-COMPOSITION.problem_list.v1' ORDER BY ehr.event_context.start_time DESC;"
      ],
      aql: [
        "select a/uid/value as uid, a_a/items/data[at0001]/items[at0002]/value/value as problem from EHR e contains COMPOSITION a[openEHR-EHR-COMPOSITION.care_summary.v0] contains SECTION a_a[openEHR-EHR-SECTION.problems_issues_rcp.v1] where a/name/value='Problem list' and e/ehr_status/subject/external_ref/namespace = 'uk.nhs.nhs_number' and e/ehr_status/subject/external_ref/id/value ='",
        'nhsNo',
        "'"
      ]
    },
    fieldName: 'problem'  
  };
  getDomain.call(this, nhsNo, domain, callback);

} 

function getMedications(nhsNo, callback) {
  var domain = {
    name: 'medications',
    query: {
      sql: [
        "SELECT ehr.entry.composition_id as uid, ehr.party_identified.name as author, ehr.entry.entry #>> '{/composition[openEHR-EHR-COMPOSITION.medication_list.v0 and name/value=''Current medication list''], /content[openEHR-EHR-SECTION.medication_medical_devices_rcp.v1],0, /items[openEHR-EHR-SECTION.current_medication_rcp.v1],0,/items[openEHR-EHR-INSTRUCTION.medication_order.v0],0,/activities[at0001 and name/value=''Order''], /description[at0002],/items[at0070 and name/value=''Medication item''],/value,value }' as name FROM ehr.entry INNER JOIN ehr.composition ON ehr.composition.id=ehr.entry.composition_id INNER JOIN ehr.party_identified ON ehr.composition.composer=ehr.party_identified.id WHERE (ehr.composition.ehr_id = '",
        'openEHRNo',
        "') AND (ehr.entry.archetype_Id = 'openEHR-EHR-COMPOSITION.medication_list.v0');"
      ],
      aql: [
        "select a/uid/value as uid, a_a/items/items/data[at0001]/items/items[at0001]/value/value as name from EHR e contains COMPOSITION a[openEHR-EHR-COMPOSITION.care_summary.v0] contains SECTION a_a[openEHR-EHR-SECTION.medication_medical_devices_rcp.v1] where a/name/value='Current medication list' and e/ehr_status/subject/external_ref/namespace = 'uk.nhs.nhs_number' and e/ehr_status/subject/external_ref/id/value = '",
        'nhsNo',
        "'"
      ]
    },
    fieldName: 'name'
  };
  getDomain.call(this, nhsNo, domain, callback);
}



function getContacts(nhsNo, callback) {
  var domain = {
    name: 'contacts',
    dontAsk: {
      'ethercis': true 
    },
    query: {
      aql: [
        "select a/uid/value as uid, a_a/items/data[at0001]/items/items[openEHR-EHR-CLUSTER.person_name.v1]/items/value/value as name from EHR e contains COMPOSITION a[openEHR-EHR-COMPOSITION.care_summary.v0] contains SECTION a_a[openEHR-EHR-SECTION.relevant_contacts_rcp.v1] where a/name/value='Relevant contacts' and e/ehr_status/subject/external_ref/namespace = 'uk.nhs.nhs_number' and e/ehr_status/subject/external_ref/id/value = '",
        'nhsNo',
        "'"
      ]
    },
    fieldName: 'name'
  };
  getDomain.call(this, nhsNo, domain, callback);
}

function openEHRRequest(params) {
  
  var noOfServers = 0;
  for (var host in openEHR.servers) {
    noOfServers++;
  }
  var count = 0;
  var options;
  var url;
  for (var host in openEHR.servers) {

    if (params.dontAsk && params.dontAsk[host]) {
      count++;
      continue; // ignore this host
    }

    url = openEHR.servers[host].url + params.url;
    options = {
      url: url,
      method: params.method || 'GET',
      json: true
    };
    if (params.useSessionId !== false) {
      options.headers = {
        'Ehr-Session': openEHR.sessions[host]
      }
    }
    if (params.queryString) options.qs = params.queryString;
    if (params.hostSpecific) {
      for (var param in params.hostSpecific[host]) {
        options[param] = params.hostSpecific[host][param];
      }
    }
    console.log('request to ' + host + ': ' + JSON.stringify(options));
    (function(host, params, noOfServers) {
      request(options, function(error, response, body) {
        count++;
        console.log('response from ' + host + ': ' + JSON.stringify(body));
        if (params.processBody) params.processBody(body, host);
        if (count === noOfServers && params.callback) {
          params.callback();
        }
      });
    }(host, params, noOfServers));
  }
}

function getPatient(nhsNo, finished) {
  var q = this;
  if (!openEHR.sessions) {
    var username = 'c4h_ripple_osi';
    var password = 'InDeCoMP';
    getOpenEHRSessions(username, password, function() {
      // try again now we have sessions set up
      getPatient.call(q, nhsNo, finished);
    });
  }
  else {
    if (!openEHR.nhsNoMap[nhsNo]) {
      getOpenEHRId(nhsNo, function() {
      // try again now can map the NHS No
      getPatient.call(q, nhsNo, finished);
    });
    }
    else {
      getPatientSummary.call(this, nhsNo, function() {
        var summaryGlo = new q.documentStore.DocumentNode('ripplePatientSummary', [process.pid]);
        console.log('NHS No: ' + nhsNo);
        var patient = new this.documentStore.DocumentNode('ripplePatients', [process.pid, nhsNo]).getDocument();
        console.log('patient: ' + JSON.stringify(patient));

        var results = {
          allergies: [],
          problems: [],
          medications: [],
          contacts: [],
          transfers: []
        };
        summaryGlo.$('allergies').forEachChild(function(index, childNode) {
          results.allergies.push(childNode.getDocument());
        });
        summaryGlo.$('problems').forEachChild(function(index, childNode) {
          results.problems.push(childNode.getDocument());
        });
        summaryGlo.$('medications').forEachChild(function(index, childNode) {
          results.medications.push(childNode.getDocument());
        });
        summaryGlo.$('contacts').forEachChild(function(index, childNode) {
          results.contacts.push(childNode.getDocument());
        });

        results.id = nhsNo;
        results.name = patient.name;
        results.gender = patient.gender;
        results.dateOfBirth = patient.dateOfBirth;
        results.nhsNumber = nhsNo;
        results.address = patient.address;
        results.pasNumber = patient.pasNo;
        results.gpDetails = patient.gpDetails;
        results.telephone = patient.phone;
        finished(results);
      });
    }
  }
}

module.exports = {

  init: function() {
    var q = this;

    if (this.isFirst) {
      console.log('************');
      console.log('**** clearing down ripple globals ********');
      console.log('************');
      new this.documentStore.DocumentNode('ripplePatients').delete();
      new this.documentStore.DocumentNode('rippleGPs').delete();
      new this.documentStore.DocumentNode('rippleMedicalDepts').delete();
      new this.documentStore.DocumentNode('ripplePatientSummary').delete();
    }

    this.on('domainReady', function(domain, ready, callback) {
      console.log(domain + ' ready!');
      ready[domain] = true;
      if (ready.allergies && ready.medications && ready.problems && ready.contacts) {
        callback.call(q);
        return;
      }
    });

    this.on('mySQLResultsReady', function(tableName, ready, callback) {
      console.log(tableName + ' ready!');
      ready[tableName] = true;
      if (ready.gps && ready.medicalDepts) {
        callback.call(q);
        return;
      }
    });

    console.log('*** domainReady handler loaded');
  },

  restModule: true,

  handlers: {

    patients: function(messageObj, finished) {

      if (messageObj.params && messageObj.params['0']) {
        if (messageObj.params['0'] !== '') {
          var nhsNo = messageObj.params['0'];
          getPatient.call(this, nhsNo, finished);
          return;
        }
        finished({error: 'Missing patient Id'});
        return;
      }
      // no patient Id specified, so fetch entire list
      getPatients.call(this, finished);
    }
  }
};

